@page "/"
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@using TicTacToe.Library;
@using TicTacToe.Library.Extensions;
@using TicTacToe.Library.Models;

@code {
    private GameData _gameData;
    private List<Tuple<DateTime, string, string>> _chatLog;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _gameData = new GameData()
        {
            GameBoard = new TicTacToe.Board(),
            GamesPlayed = 0,
            GameState = GameData.GameStates.None,
            AISmackTalkPhrases = new List<string>() // https://getemoji.com/
            {
                "You're garbage 😂😂😂",
                "You really think that's gonna work, {playeronename}?",
                "You suck, {playeronename}.",
                "Pff, {playeronename}, I've seen better moves from my grandmother.",
                "Imagine being this bad at Tic Tac Toe 😂",
                "I've played against people with no brain that are smarter than you.",
            },
            AIWonPhrases = new List<string>() // https://getemoji.com/
            {
                "Lol... you thought you could beat me.",
                "Get on my level, {playeronename}.",
                "You're literally dog water.",
                "I'd say GG, but there was nothing G about the G.",
                "Zzzzz 😴😴"
            },
            AILostPhrases = new List<string>() // https://getemoji.com/
            {
                "Whatever, you probably cheated.",
                "This is dumb.",
                "Who the hell made this crap to begin with."
            },
            AIDrawPhrases = new List<string>() // https://getemoji.com/
            {
                "Nonsense.",
                "Must of been a fluke."
            }
        };
        _chatLog = new List<Tuple<DateTime, string, string>>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var hasPlayerName = await _localStorage.ContainKeyAsync("game.player.name");
            var hasCharacterId = await _localStorage.ContainKeyAsync("game.player.name");

            if (hasPlayerName && hasCharacterId)
            {
                var playerName = await _localStorage.GetItemAsStringAsync("game.player.characterid");
                var characterId = await _localStorage.GetItemAsStringAsync("game.player.characterid");

                if (string.IsNullOrWhiteSpace(playerName) || string.IsNullOrWhiteSpace(characterId))
                {
                    _navigationManager.NavigateTo("setup");
                }
                else
                {
                    await SetupPlayersAsync(); // Just to show something on screen
                    //for (int i = 0; i < 50; i++)
                    //    _chatLog.Add(Tuple.Create(DateTime.Now, _gameData.PlayerTwoName, _gameData.AISmackTalkPhrases.Random()));
                    this.StateHasChanged();
                }
            }
            else
            {
                _navigationManager.NavigateTo("setup");
            }
        }
    }

    private async Task SetupGameBoardAsync()
    {
        var random = new System.Random(Guid.NewGuid().GetHashCode());

        _gameData.GameBoard = new Library.TicTacToe.Board();
        await _jsRuntime.InvokeVoidAsync("window.game.resetCellAvatars");

        _gameData.GameState = random.Next(0, 100) < 50 ? GameData.GameStates.PlayerOneMove : GameData.GameStates.PlayerTwoMove;
        _chatLog.Add(Tuple.Create(DateTime.Now, "System", $"{(_gameData.GameState == GameData.GameStates.PlayerOneMove ? _gameData.PlayerOneName : _gameData.PlayerTwoName)} goes first"));
    }

    private async Task SetupPlayersAsync()
    {
        var playerCharacterId = await _localStorage.GetItemAsStringAsync("game.player.characterid");
        var playerName = await _localStorage.GetItemAsStringAsync("game.player.name");

        _gameData.PlayerOneName = playerName;
        _gameData.PlayerOneCharacterId = playerCharacterId;
        _gameData.PlayerOneIsAI = false;

        _gameData.PlayerTwoName = "Vink (AI)";
        _gameData.PlayerTwoCharacterId = "vink";
        _gameData.PlayerTwoIsAI = true;
    }

    private async Task StartGameAsync()
    {
        //await SetupPlayersAsync();
        await SetupGameBoardAsync();
        if ((_gameData.GameState == GameData.GameStates.PlayerOneMove && _gameData.PlayerOneIsAI == true) || (_gameData.GameState == GameData.GameStates.PlayerTwoMove && _gameData.PlayerTwoIsAI == true))
            AIHandleMoveAsync();
        this.StateHasChanged();
    }

    private async Task UpdateGameState()
    {
        string winner;

        if (_gameData.GameState == GameData.GameStates.None)
            return;

        winner = TicTacToe.EvaluateBoard(_gameData.GameBoard);
        if (winner == null && TicTacToe.MoveIsAvailable(_gameData.GameBoard) == false)
        {
            _gameData.GamesPlayed++;
            _gameData.GameState = GameData.GameStates.GameOver_Draw;
            _chatLog.Add(Tuple.Create(DateTime.Now, "System", "It's a draw"));
            AITalk(_gameData.AIDrawPhrases, 100);
        }
        else if (winner != null)
        {
            _gameData.GamesPlayed++;
            if (winner == _gameData.PlayerOneCharacterId)
            {
                _gameData.GameState = GameData.GameStates.GameOver_PlayerOneWins;
                _chatLog.Add(Tuple.Create(DateTime.Now, "System", $"{_gameData.PlayerOneName} wins!"));
                AITalk(_gameData.AILostPhrases, 100);
            }
            else if (winner == _gameData.PlayerTwoCharacterId)
            {
                _gameData.GameState = GameData.GameStates.GameOver_PlayerTwoWins;
                _chatLog.Add(Tuple.Create(DateTime.Now, "System", $"{_gameData.PlayerTwoName} wins!"));
                AITalk(_gameData.AIWonPhrases, 100);
            }
            else
            {
                _chatLog.Add(Tuple.Create(DateTime.Now, "System", $"Game over!"));
            }
        }
        else
        {
            _gameData.GameState = _gameData.GameState == GameData.GameStates.PlayerOneMove ? GameData.GameStates.PlayerTwoMove : GameData.GameStates.PlayerOneMove;
            if ((_gameData.GameState == GameData.GameStates.PlayerOneMove && _gameData.PlayerOneIsAI == true) || (_gameData.GameState == GameData.GameStates.PlayerTwoMove && _gameData.PlayerTwoIsAI == true))
                AIHandleMoveAsync();
        }

        this.StateHasChanged();
    }

    private async Task PlayerHandleMoveAsync(int row, int column)
    {
        string ownCharacterId = string.Empty;

        if (_gameData.GameState == GameData.GameStates.None)
            return;

        ownCharacterId = _gameData.GameState == GameData.GameStates.PlayerOneMove ? _gameData.PlayerOneCharacterId : _gameData.GameState == GameData.GameStates.PlayerTwoMove ? _gameData.PlayerTwoCharacterId : string.Empty;

        if ((_gameData.GameState == GameData.GameStates.PlayerOneMove && _gameData.PlayerOneIsAI == false) || (_gameData.GameState == GameData.GameStates.PlayerTwoMove && _gameData.PlayerTwoIsAI == false))
        {
            if (_gameData.GameBoard[row, column] == null)
            {
                _gameData.GameBoard[row, column] = ownCharacterId;
                await _jsRuntime.InvokeVoidAsync("window.game.setCellAvatar", $"ttt-gameboard-cell-{row}-{column}-character-avatar", ownCharacterId);
                AITalk(_gameData.AISmackTalkPhrases, 10);
                await UpdateGameState();
            }
        }
    }

    private async Task AIHandleMoveAsync()
    {
        string ownCharacterId = string.Empty;
        string opponentCharacterId = string.Empty;

        if (_gameData.GameState == GameData.GameStates.None)
            return;

        await Task.Delay(1000); // Small delay for AI
        ownCharacterId = _gameData.GameState == GameData.GameStates.PlayerOneMove ? _gameData.PlayerOneCharacterId : _gameData.GameState == GameData.GameStates.PlayerTwoMove ? _gameData.PlayerTwoCharacterId : string.Empty;
        opponentCharacterId = _gameData.GameState == GameData.GameStates.PlayerOneMove ? _gameData.PlayerTwoCharacterId : _gameData.GameState == GameData.GameStates.PlayerTwoMove ? _gameData.PlayerOneCharacterId : string.Empty;

        //var index = _gameData.CellData.Select((v, i) => new { Index = i, Value = v }).Where(x => string.IsNullOrWhiteSpace(x.Value) == true).Select(x => x.Index).ToList().Random();
        var coordinate = TicTacToe.FindBestMove(_gameData.GameBoard, ownCharacterId, opponentCharacterId);
        if (_gameData.GameBoard[coordinate.Item1, coordinate.Item2] == null)
        {
            _gameData.GameBoard[coordinate.Item1, coordinate.Item2] = ownCharacterId;
            await _jsRuntime.InvokeVoidAsync("window.game.setCellAvatar", $"ttt-gameboard-cell-{coordinate.Item1}-{coordinate.Item2}-character-avatar", ownCharacterId);
            AITalk(_gameData.AISmackTalkPhrases, 10);
            await UpdateGameState();
        }
    }

    private void AITalk(List<string> phrases, int chance)
    {
        var random = new Random(Guid.NewGuid().GetHashCode());
        if (random.Next(1, 100) < chance)
        {
            _chatLog.Add(Tuple.Create(DateTime.Now, _gameData.PlayerTwoName, phrases.Random()));
            if (_chatLog.Count > 50)
                _chatLog.RemoveAt(_chatLog.Count - 1);
        }
    }
}

<link rel="stylesheet" href="css/game.css" />

<div class="container">
    <h3>Round @(_gameData.GamesPlayed + 1)</h3>
    <div class="row">
        <div class="col-8">
            <div class="ttt-player-info-container">
                <div class="row mb-2">
                    <div class="col-4 text-center">
                        <div class="card">
                            <img class="card-img-top" width="100" src="images/characters/@(_gameData.PlayerOneCharacterId).png">
                            <div class="card-body">
                                <h5 class="card-title">@_gameData.PlayerOneName</h5>
                            </div>
                        </div>
                    </div>
                    <div class="col-4 text-center">
                        VS
                        @if (_gameData.GameState == GameData.GameStates.None)
                        {
                            <div>
                                <button class="btn btn-primary" @onclick="@(async () => await StartGameAsync())" @onclick:preventDefault="true">Start</button>
                            </div>
                        }
                        else if (_gameData.GameState == GameData.GameStates.GameOver_PlayerOneWins || _gameData.GameState == GameData.GameStates.GameOver_PlayerTwoWins || _gameData.GameState == GameData.GameStates.GameOver_Draw)
                        {
                            <div>
                                <button class="btn btn-primary" @onclick="@(async () => await StartGameAsync())" @onclick:preventDefault="true">Play Again</button>
                            </div>
                        }
                    </div>
                    <div class="col-4 text-center">
                        <div class="card">
                            <img class="card-img-top" width="100" src="images/characters/@(_gameData.PlayerTwoCharacterId).png">
                            <div class="card-body">
                                <h5 class="card-title">@_gameData.PlayerTwoName</h5>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <table class="table m-0 ttt-gameboard-container" style="@(_gameData.GameState == GameData.GameStates.None ? "display: none;" : string.Empty )">
                @{
                    @for (int row = 0; row < _gameData.GameBoard.RowCount; row++)
                    {
                        <tr class="ttt-gameboard-row">
                            @for (int column = 0; column < _gameData.GameBoard.ColumnCount; column++)
                            {
                                <td class="p-0 ttt-gameboard-cell">
                                    @{
                                        var isTopLeft = row == 0 && column == 0;
                                        var isTopMiddle = row == 0 && column > 0 && column < _gameData.GameBoard.ColumnCount - 1;
                                        var isTopRight = row == 0 && column == _gameData.GameBoard.ColumnCount - 1;
                                        var isMiddleLeft = row > 0 && row < _gameData.GameBoard.RowCount - 1 && column == 0;
                                        var isMiddleRight = row > 0 && row < _gameData.GameBoard.RowCount - 1 && column == _gameData.GameBoard.ColumnCount - 1;
                                        var isBottomLeft = row == _gameData.GameBoard.RowCount - 1 && column == 0;
                                        var isBottomMiddle = row == _gameData.GameBoard.RowCount - 1 && column > 0 && column < _gameData.GameBoard.ColumnCount - 1;
                                        var isBottomRight = row == _gameData.GameBoard.RowCount - 1 && column == _gameData.GameBoard.ColumnCount - 1;
                                        var isCenter = row > 0 && row < _gameData.GameBoard.RowCount - 1 && column > 0 && column < _gameData.GameBoard.ColumnCount - 1;// (_gameData.GameBoard.RowCount - 1) / 2 && column == (_gameData.GameBoard.ColumnCount - 1) / 2;

                                        var rowIndex = row;
                                        var columnIndex = column;
                                        <button id="ttt-gameboard-cell-@(rowIndex)-@(columnIndex)" class="@(isTopLeft ? "top-left" : isTopMiddle ? "top-middle" : isTopRight ? "top-right" : isBottomLeft ? "bottom-left" : isBottomMiddle ? "bottom-middle" : isBottomRight ? "bottom-right" : isMiddleLeft ? "middle-left" : isCenter ? "middle-center" : isMiddleRight ? "middle-right" : string.Empty) w-100 h-100 p-0" @onclick="@(async () => await PlayerHandleMoveAsync(rowIndex, columnIndex))" @onclick:preventDefault="true">
                                            <img id="ttt-gameboard-cell-@(rowIndex)-@(columnIndex)-character-avatar" />
                                        </button>
                                    }
                                </td>
                            }
                        </tr>
                    }
                }
            </table>
        </div>
        <div class="col-4">
            <div class="w-100 p-2 border border-dark rounded overflow-auto ttt-chat-log-container">
                @foreach (Tuple<DateTime, string, string> log in _chatLog.OrderByDescending(x => x.Item1))
                {
                    if (log.Item2 == "System")
                    {
                        <p class="m-0">[@(log.Item1.ToString("HH:mm:ss"))] <b>System:</b> @(log.Item3.Replace("{playeronename}", _gameData.PlayerOneName).Replace("playertwoname", _gameData.PlayerTwoName))</p>
                    }
                    else
                    {
                        <p class="m-0">[@(log.Item1.ToString("HH:mm:ss"))] @(log.Item2): @((MarkupString)log.Item3.Replace("{playeronename}", _gameData.PlayerOneName).Replace("playertwoname", _gameData.PlayerTwoName))</p>
                    }
                }
            </div>
        </div>
    </div>
</div>